const express = require('express');
const { check } = require('express-validator');
const multer = require('multer');
const reportController = require('../controllers/reportController');
const { auth, managerOrAdmin } = require('../middleware/auth');

const router = express.Router();

// Set up multer for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

const upload = multer({ storage: storage });

/**
 * @route   GET /api/reports
 * @desc    Get all reports
 * @access  Private
 */
router.get('/', auth, reportController.getAllReports);

/**
 * @route   GET /api/reports/stats
 * @desc    Get report statistics
 * @access  Private
 */
router.get('/stats', auth, reportController.getReportStats);

/**
 * @route   GET /api/reports/:id
 * @desc    Get report by ID
 * @access  Private
 */
router.get('/:id', auth, reportController.getReportById);

/**
 * @route   POST /api/reports
 * @desc    Create a new report
 * @access  Private
 */
router.post(
  '/',
  [
    auth,
    check('title', 'Title is required').not().isEmpty(),
    check('type', 'Type is required').isIn(['rfp-analysis', 'bid-evaluation', 'bid-comparison', 'compliance-check']),
    check('generatedBy', 'Generated by is required').isIn(['compliance-agent', 'evaluation-agent', 'comparative-agent']),
    check('summary', 'Summary is required').not().isEmpty(),
    check('content', 'Content is required').not().isEmpty()
  ],
  reportController.createReport
);

/**
 * @route   PUT /api/reports/:id
 * @desc    Update report
 * @access  Private
 */
router.put(
  '/:id',
  [
    auth,
    check('title', 'Title is required').optional().not().isEmpty(),
    check('summary', 'Summary is required').optional().not().isEmpty(),
    check('content', 'Content is required').optional().not().isEmpty(),
    check('status', 'Status must be valid').optional().isIn(['draft', 'final', 'archived'])
  ],
  reportController.updateReport
);

/**
 * @route   DELETE /api/reports/:id
 * @desc    Delete report
 * @access  Private
 */
router.delete('/:id', auth, reportController.deleteReport);

/**
 * @route   POST /api/reports/:id/attachments
 * @desc    Add attachment to report
 * @access  Private
 */
router.post(
  '/:id/attachments',
  [auth, upload.single('file')],
  reportController.addAttachment
);

/**
 * @route   DELETE /api/reports/:id/attachments/:attachmentId
 * @desc    Delete attachment from report
 * @access  Private
 */
router.delete(
  '/:id/attachments/:attachmentId',
  auth,
  reportController.deleteAttachment
);

/**
 * @route   POST /api/reports/:id/share
 * @desc    Share report with user
 * @access  Private
 */
router.post(
  '/:id/share',
  [
    auth,
    check('userId', 'User ID is required').not().isEmpty(),
    check('accessLevel', 'Access level must be valid').isIn(['view', 'edit', 'comment'])
  ],
  reportController.shareReport
);

/**
 * @route   DELETE /api/reports/:id/share/:userId
 * @desc    Remove share from report
 * @access  Private
 */
router.delete(
  '/:id/share/:userId',
  auth,
  reportController.removeShare
);

/**
 * @route   POST /api/reports/:id/chat
 * @desc    Add chat message to report
 * @access  Private
 */
router.post(
  '/:id/chat',
  [
    auth,
    check('role', 'Role is required').isIn(['user', 'system']),
    check('content', 'Content is required').not().isEmpty()
  ],
  reportController.addChatMessage
);

module.exports = router;
